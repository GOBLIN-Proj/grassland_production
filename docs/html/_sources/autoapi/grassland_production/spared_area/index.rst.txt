:py:mod:`grassland_production.spared_area`
==========================================

.. py:module:: grassland_production.spared_area

.. autoapi-nested-parse::

   ====================
   Spared Area Module
   ====================

   This module contains the Grasslands class, which is designed to manage and process
   data related to grassland areas, specifically focusing on calculating the total
   grassland area and spared area under various scenarios. It utilizes classes from
   the grassland_production package for detailed analysis and computations.

   Classes:
       Grasslands: Manages and computes grassland and spared area data.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   grassland_production.spared_area.Grasslands




.. py:class:: Grasslands(ef_country, calibration_year, target_year, scenario_data, scenario_animals_df, baseline_animals_df)


   A class to manage and compute grassland and spared area data under various scenarios.

   This class integrates data from various sources to assess the total area of grasslands
   and the spared area (destocked grassland) for different scenarios.

   :param ef_country: The country for which the analysis is performed.
   :type ef_country: str
   :param calibration_year: The calibration year.
   :type calibration_year: int
   :param target_year: The target year for future scenario projections.
   :type target_year: int
   :param scenario_inputs_df: DataFrame containing scenario input variables data.
   :type scenario_inputs_df: DataFrame
   :param scenario_animals_df: DataFrame containing scenario animal data.
   :type scenario_animals_df: DataFrame
   :param baseline_animals_df: DataFrame containing baseline animal data.
   :type baseline_animals_df: DataFrame

   .. attribute:: sc_class

      Fetches scenario data.

      :type: ScenarioDataFetcher

   .. attribute:: scenario_list

      List of scenarios.

      :type: list

   .. attribute:: data_manager_class

      Manages and processes grassland data.

      :type: DataManager

   .. attribute:: calibration_year

      Year of data calibration.

      :type: int

   .. attribute:: target_year

      Target year for data analysis.

      :type: int

   .. attribute:: default_calibration_year

      Default year used for calibration in case of data discrepancies.

      :type: int

   .. attribute:: loader_class

      Class for loading necessary data.

      :type: Loader

   .. attribute:: yield_class

      Class for managing grassland yield data.

      :type: Yield

   .. attribute:: areas_class

      Class for managing grassland area data.

      :type: Areas

   .. attribute:: dm_class

      Class for managing dry matter data.

      :type: DryMatter

   .. attribute:: farm_based_UR

      Class for calculating utilisation rates.

      :type: UtilisationRate

   .. method:: get_grass_total_area()

      Computes and returns the total grassland area.

   .. method:: get_non_grass_total_area()

      Computes and returns the total non-grassland (spared) area.

   .. method:: get_cohort_spared_area()

      Computes spared area distributed across different cohorts.

   .. method:: get_cohort_grassland_area()

      Computes grassland area distributed across different cohorts.
      

   .. py:method:: get_grass_total_area()

      Calculates and returns the total grassland area for each scenario and system over specified years.

      This method computes the total area of grasslands required to meet the dry matter requirements
      for dairy, beef and sheep. It uses a weighted average yield of different grassland types within each
      system to determine the necessary area. The weights are based on the proportions of each
      grassland type in the system.

      The total area is calculated by dividing the dry matter requirement for each system by the
      weighted average yield and then by the system's utilization rate. The process is repeated
      for each scenario and system for the given years, and the results are aggregated into a single
      DataFrame.

      The calculation considers two specific years - the calibration year and the target year, and
      operates across all defined scenarios.

      :returns:

                A DataFrame with rows representing the years and columns representing each scenario.
                        Each cell contains the total grassland area required for that scenario and year.
      :rtype: DataFrame


   .. py:method:: get_non_grass_total_area()

      Calculates and returns a DataFrame representing the spared (destocked) area for various scenarios.

      The spared area is defined as the difference in grassland area between the calibration year
      and the target year. For each scenario, if the year is not the target year, the spared area
      is assumed to be zero. If the year is the target year, the spared area is calculated as the
      difference between the grassland area in the calibration year and the grassland area in the
      target year.

      This method first computes the total grassland area for each scenario and then uses this data
      to determine the spared area.

      :returns:

                A DataFrame with rows representing the years (calibration year and target year)
                        and columns representing each scenario. Each cell contains the spared area for
                        that scenario and year.
      :rtype: DataFrame


   .. py:method:: get_cohort_spared_area()

      Calculates and returns the spared area distributed across different cohorts for each scenario.

      This method determines the spared area (destocked grassland) for each cohort in each scenario.
      It utilizes the weighted dry matter (DM) reduction contributions calculated by the DryMatter class
      (self.dm_class) to apportion the total spared area among different cohorts. The spared area for
      each scenario is obtained using the get_non_grass_total_area method.

      The calculation multiplies the total spared area for each scenario by the weighted DM reduction
      contribution for each cohort within that scenario. This approach provides a detailed view of how
      spared area origins are distributed among different cohorts.

      :returns:

                A dictionary where each key is a scenario and its value is another dictionary.
                    The nested dictionary has cohorts as keys and their respective spared areas as values.
      :rtype: dict


   .. py:method:: get_cohort_grassland_area()

      Calculates and returns the grassland area for each cohort within each scenario.

      This method assesses the grassland area distribution among various cohorts for each scenario.
      It uses the actual dry matter (DM) weights, as calculated by the DryMatter class, to determine
      the proportion of grassland area allocated to each cohort. The total grassland area for each
      scenario is obtained using the get_grass_total_area method.

      The calculation involves multiplying the total grassland area for each scenario by the
      DM weights for each cohort. This provides a detailed breakdown of grassland area distribution,
      which is essential for understanding the allocation of grassland resources among different
      cohorts in various scenarios.

      :returns:

                A nested dictionary where the outer keys are scenarios, the inner keys are cohorts,
                    and the values are dictionaries with years as keys and their respective grassland areas as values.
      :rtype: dict



