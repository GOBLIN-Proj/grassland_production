:py:mod:`grassland_production.grass_yield`
==========================================

.. py:module:: grassland_production.grass_yield

.. autoapi-nested-parse::

   ====================
   Grass Yield Module
   ====================

   This module includes the Yield class, which calculates grass yield per hectare for various farm systems
   and scenarios. The class uses models and data to estimate yields based on different fertilization strategies
   and soil conditions.

   Classes:
       Yield: Manages the computation of grass yield for different farm systems and scenarios.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   grassland_production.grass_yield.Yield




.. py:class:: Yield(ef_country, calibration_year, target_year, scenario_data, scenario_animals_df, baseline_animals_df, fertiliser_class=None)


   The Yield class is dedicated to calculating grass yield per hectare for different farm systems (dairy, beef,
   sheep) under various scenarios. It considers the impact of fertilization (both inorganic and organic),
   clover proportion, soil types, and other factors on grass yield.

   :param ef_country: The country for which the analysis is performed.
   :type ef_country: str
   :param calibration_year: The calibration year.
   :type calibration_year: int
   :param target_year: The target year for future scenario projections.
   :type target_year: int
   :param scenario_inputs_df: DataFrame containing scenario input variables data.
   :type scenario_inputs_df: DataFrame
   :param scenario_animals_df: DataFrame containing scenario animal data.
   :type scenario_animals_df: DataFrame
   :param baseline_animals_df: DataFrame containing baseline animal data.
   :type baseline_animals_df: DataFrame
   :param fertiliser_class: Instance of Fertilisation for handling fertilization-related data.
   :type fertiliser_class: Fertilisation, optional

   .. attribute:: sc_class

      Instance of ScenarioDataFetcher for fetching scenario data.

      :type: ScenarioDataFetcher

   .. attribute:: scenario_list

      List of scenarios.

      :type: list

   .. attribute:: data_manager_class

      Instance of DataManager for managing data related to yield.

      :type: DataManager

   .. attribute:: fertiliser_class

      Instance of Fertilisation for handling fertilization-related data.

      :type: Fertilisation

   .. attribute:: loader_class

      Instance of Loader to load various datasets.

      :type: Loader

   .. attribute:: calibration_year

      The base year for data calibration.

      :type: int

   .. attribute:: target_year

      The target year for future scenario projections.

      :type: int

   .. attribute:: soil_class_yield_gap

      A dictionary mapping soil types to yield gaps.

      :type: dict

   .. attribute:: soil_class_prop

      A DataFrame indicating the proportion of different soil types.

      :type: DataFrame

   .. method:: get_clover_parameters()

      
      Defines clover proportion and rate for different scenarios to differentiate between conventional
      yield response curves and clover-grass systems.
      

   .. method:: get_yield()

      
      Calculates the yield per hectare for each grassland type, farm system, and scenario.
      

   .. method:: _yield_response_function_to_fertilizer()

      
      Internal method to model the yield response to fertilizer application.
      

   .. py:method:: get_clover_parameters()

      Defines clover proportion and rate for each scenario, differentiating between conventional
      yield response curves and clover-grass systems. This method considers scenarios for dairy,
      beef, and sheep farm systems with specific manure management practices.

      The method retrieves these parameters from the scenario data and organizes them in a dictionary
      structure for later use in yield calculations.

      :returns: A dictionary containing clover parameters for different scenarios and farm systems.
      :rtype: dict

      The clover parameters include:
          - Clover proportion: The proportion of clover in the pasture.
          - Clover fertilisation rate: The rate of clover fertilisation.



   .. py:method:: get_yield()

      Calculates the yield per hectare for different scenarios and farm systems based on fertilization and other factors.
      The method computes yield values for dairy, beef, and sheep farm systems under various scenarios.

      The method utilizes information on fertilization rates, organic manure spread, soil properties, and clover parameters
      to calculate yields for each scenario and farm system. It iterates through different combinations of scenarios,
      farm systems, grassland types, and soil groups to compute yields.

      :returns: A dictionary containing yield data for different scenarios and farm systems. The dictionary is structured as follows:
                - Keys: Farm system types ("dairy," "beef," "sheep").
                - Values: Nested dictionaries, where each inner dictionary represents a scenario with the following structure:
                    - Keys: Scenario names.
                    - Values: Pandas DataFrames containing yield values for different grassland types (e.g., "Pasture," "Grass silage").
                        - The DataFrame's rows correspond to grassland types.
                        - The DataFrame's columns correspond to calibration and target years.
      :rtype: dict


   .. py:method:: _yield_response_function_to_fertilizer(fertilizer, grassland, clover_prop=0, clover_fert=0, manure_spread=0)

      Calculate the yield response to fertilizer application based on the specified parameters.

      This method calculates the yield response to fertilizer application based on a yield response function taken from Finneran et al. (2011).
      The function takes into account the type of grassland, clover proportion, clover fertilization, and organic manure spread.

      If the grassland is "Grass silage" or "Pasture," the method calculates the yield response by considering both
      the default yield response function and the contribution of clover. If the grassland is different, only the default
      yield response function is applied.

      :param fertilizer: The amount of fertilizer applied (in kilograms per hectare).
      :type fertilizer: float
      :param grassland: The type of grassland ("Grass silage" or "Pasture").
      :type grassland: str
      :param clover_prop: The proportion of clover in the grassland (0 to 1). Default is 0.
      :type clover_prop: float, optional
      :param clover_fert: The rate of clover fertilization (in kilograms per hectare). Default is 0.
      :type clover_fert: float, optional
      :param manure_spread: The amount of organic manure spread (in kilograms per hectare). Default is 0.
      :type manure_spread: float, optional

      :returns: The estimated yield response to the specified fertilizer application (in metric tons per hectare).
      :rtype: float

      Note: The result is converted to metric tons per hectare using the factor 1e-3.




